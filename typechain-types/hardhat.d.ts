/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AlphaDexFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphaDexFactory__factory>;
    getContractFactory(
      name: "AlphaDexPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphaDexPair__factory>;
    getContractFactory(
      name: "IMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigrator__factory>;
    getContractFactory(
      name: "AlphaDexRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphaDexRouter__factory>;
    getContractFactory(
      name: "AlphaLPERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphaLPERC20__factory>;
    getContractFactory(
      name: "AlphaLPMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphaLPMigrator__factory>;
    getContractFactory(
      name: "AlphaERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphaERC20__factory>;
    getContractFactory(
      name: "AlphaFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphaFactory__factory>;
    getContractFactory(
      name: "AlphaPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphaPair__factory>;
    getContractFactory(
      name: "IAlphaCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlphaCallee__factory>;
    getContractFactory(
      name: "IAlphaERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlphaERC20__factory>;
    getContractFactory(
      name: "IAlphaFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlphaFactory__factory>;
    getContractFactory(
      name: "IAlphaPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAlphaPair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Uniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Uniswap__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AlphaDexFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphaDexFactory>;
    getContractAt(
      name: "AlphaDexPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphaDexPair>;
    getContractAt(
      name: "IMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigrator>;
    getContractAt(
      name: "AlphaDexRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphaDexRouter>;
    getContractAt(
      name: "AlphaLPERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphaLPERC20>;
    getContractAt(
      name: "AlphaLPMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphaLPMigrator>;
    getContractAt(
      name: "AlphaERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphaERC20>;
    getContractAt(
      name: "AlphaFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphaFactory>;
    getContractAt(
      name: "AlphaPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphaPair>;
    getContractAt(
      name: "IAlphaCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlphaCallee>;
    getContractAt(
      name: "IAlphaERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlphaERC20>;
    getContractAt(
      name: "IAlphaFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlphaFactory>;
    getContractAt(
      name: "IAlphaPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAlphaPair>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Uniswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Uniswap>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
